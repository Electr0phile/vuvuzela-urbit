Relevant particularities of Urbit in relation to Vuvuzela:
- Every user knows every other user's public key
  by default. Thus we don't need to set up PKI.
- All networking packets are end-to-end encrypted.
  However, our threat models include situations
  where all but one servers are compromized. Thus
  we still have to perform onion encryption.
- States are versioned, no information is ever lost,
  everything stays in history. Bad for long-term
  correlation surveillance?
- All messages on one wire are always received in
  the same order they were sent. We can use that to
  increase the number of simultaneous conversations.

Addressing Vuvuzela's limitations from Urbit's standpoint:
- Bandwidth: ???
- Deployment costs: ???
- Treating users as noise: ???
- PKI:   -----------.
- Forward secrecy:  V
  Already in place! Extremely easy to access public keys,
  relatively easy to change private keys in case of need
  for forward secrecy.
- Message size: ???
- Group privacy: ???
- DoS attacks:
  Scarcity of Urbit's namespace prevents users from abusing
  the system, making costs of spam much larger than in the
  old net.
- Multiple conversations:
  For now, each round you cand send one message and
  receive one message. This can be improved using the
  total ordering property of message delivery in ames:
  Along a particular wire, every message is delivered
  exactly once and in the same order it was sent.

Important points:
- Use Karaoke's optimistic indistinguishability? Send
  two packets in case no conversation is held and get
  them paired together, or something.
